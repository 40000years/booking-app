// Google Apps Script for iMedReserve Booking System (Complete Version with Fixed Name Parsing)
// Multi-purpose script for booking, dashboard, and student lookup

// Global variables - ต้องเปลี่ยนเป็น Spreadsheet ID ใหม่
const SPREADSHEET_ID = '1QozIKpwN0MyWYRxbATnNCzHLtP2SDcxedINrXG7H7bM'; // เปลี่ยนเป็น ID ของ Spreadsheet ใหม่
const BOOKING_SHEET_NAME = 'Bookings';
const DATA_SHEET_NAME = 'Data';

// Cache settings
const CACHE_DURATION = 300; // 5 minutes
const MAX_RETRIES = 3;
const TIMEOUT_MS = 30000; // 30 seconds

/**
 * Main GET handler for all requests
 */
function doGet(e) {
  try {
    console.log('=== doGet called ===');
    console.log('Parameters:', e.parameter);
    
    const startTime = new Date().getTime();
    const action = e.parameter.action || 'dashboard';
    
    console.log('Action:', action);
    
    let response;
    
    switch (action) {
      case 'lookupStudent':
        response = handleStudentLookup(e.parameter.studentId);
        break;
      case 'dashboard':
        response = handleDashboardRequest();
        break;
      case 'bookings':
      case 'getBookings':
        response = handleBookingsRequest();
        break;
      case 'sheets':
        response = getSheetNames();
        break;
      case 'health':
        response = healthCheck();
        break;
      default:
        response = { success: false, message: `Invalid action: ${action}` };
    }
    
    const endTime = new Date().getTime();
    console.log(`Request completed in ${endTime - startTime}ms`);
    
    // Return JSON response directly
    return ContentService.createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    console.error('doGet error:', error);
    const errorResponse = { success: false, message: 'Server error: ' + error.message };
    return ContentService.createTextOutput(JSON.stringify(errorResponse))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Main POST handler for booking submissions
 */
function doPost(e) {
  try {
    console.log('=== doPost called ===');
    console.log('Post data:', e.postData);
    
    const startTime = new Date().getTime();
    
    // Parse JSON data
    let data;
    try {
      data = JSON.parse(e.postData.contents);
      console.log('Parsed data:', data);
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      const errorResponse = { success: false, message: 'Invalid JSON data' };
      return ContentService.createTextOutput(JSON.stringify(errorResponse))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Check if it's a student lookup request
    if (data.action === 'lookupStudent') {
      const response = handleStudentLookup(data.studentId);
      const endTime = new Date().getTime();
      console.log(`Student lookup completed in ${endTime - startTime}ms`);
      return ContentService.createTextOutput(JSON.stringify(response))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Handle booking submission
    const response = handleBookingSubmission(data);
    const endTime = new Date().getTime();
    console.log(`Booking submission completed in ${endTime - startTime}ms`);
    
    return ContentService.createTextOutput(JSON.stringify(response))
      .setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    console.error('doPost error:', error);
    const errorResponse = { success: false, message: 'Server error: ' + error.message };
    return ContentService.createTextOutput(JSON.stringify(errorResponse))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Get sheet names for debugging
 */
function getSheetNames() {
  try {
    console.log('=== Getting Sheet Names ===');
    
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheets = spreadsheet.getSheets();
    
    const sheetNames = sheets.map(sheet => sheet.getName());
    console.log('Available sheet names:', sheetNames);
    
    return {
      success: true,
      sheetNames: sheetNames,
      count: sheetNames.length,
      expectedSheets: {
        booking: BOOKING_SHEET_NAME,
        data: DATA_SHEET_NAME
      }
    };
    
  } catch (error) {
    console.error('Error getting sheet names:', error);
    return {
      success: false,
      message: 'Error getting sheet names: ' + error.message
    };
  }
}

/**
 * Handle student lookup requests - รองรับรูปแบบฐานข้อมูล ID, name, class, number
 */
function handleStudentLookup(studentId) {
  try {
    console.log('=== Student Lookup ===');
    console.log('Student ID:', studentId);
    
    if (!studentId) {
      return { success: false, message: 'Student ID is required' };
    }
    
    // Clean student ID
    const cleanStudentId = studentId.toString().trim();
    
    if (cleanStudentId.length === 0) {
      return { success: false, message: 'Student ID cannot be empty' };
    }
    
    // Get spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const dataSheet = spreadsheet.getSheetByName(DATA_SHEET_NAME);
    
    if (!dataSheet) {
      const allSheets = spreadsheet.getSheets();
      const availableSheets = allSheets.map(s => s.getName());
      console.log('Available sheets:', availableSheets);
      return { 
        success: false, 
        message: `Data sheet '${DATA_SHEET_NAME}' not found. Available sheets: ${availableSheets.join(', ')}` 
      };
    }
    
    // Get all data
    const dataRange = dataSheet.getDataRange();
    const values = dataRange.getValues();
    
    console.log('Total rows in Data sheet:', values.length);
    console.log('Headers:', values[0]);
    
    if (values.length <= 1) {
      return { success: false, message: 'No student data available' };
    }
    
    // Get headers (first row)
    const headers = values[0];
    
    // Find column indices - รองรับรูปแบบฐานข้อมูลที่มี ID, name, class, number
    const idColumnIndex = headers.findIndex(header => {
      const headerStr = header.toString().toLowerCase();
      return headerStr === 'id' || 
             headerStr.includes('เลขประจำตัว') ||
             headerStr.includes('รหัสนักเรียน') ||
             headerStr.includes('student id');
    });
    
    const nameColumnIndex = headers.findIndex(header => {
      const headerStr = header.toString().toLowerCase();
      return headerStr === 'name' || 
             headerStr.includes('ชื่อ') ||
             headerStr.includes('ชื่อ-นามสกุล') ||
             headerStr.includes('full name');
    });
    
    const classColumnIndex = headers.findIndex(header => {
      const headerStr = header.toString().toLowerCase();
      return headerStr === 'class' || 
             headerStr.includes('ชั้น') ||
             headerStr.includes('grade') ||
             headerStr.includes('ระดับชั้น');
    });
    
    const numberColumnIndex = headers.findIndex(header => {
      const headerStr = header.toString().toLowerCase();
      return headerStr === 'number' || 
             headerStr.includes('เลขที่') ||
             headerStr.includes('no') ||
             headerStr.includes('ลำดับ');
    });
    
    console.log('Column indices found:', {
      idColumnIndex,
      nameColumnIndex,
      classColumnIndex,
      numberColumnIndex
    });
    
    if (idColumnIndex === -1) {
      return { 
        success: false, 
        message: `ID column not found. Available headers: ${headers.join(', ')}` 
      };
    }
    
    // Search for student
    let foundStudent = null;
    
    console.log('Searching for student ID:', cleanStudentId);
    console.log('First few rows of data:');
    for (let i = 1; i < Math.min(6, values.length); i++) {
      const row = values[i];
      const rowId = row[idColumnIndex];
      console.log(`Row ${i}: ID="${rowId}" (type: ${typeof rowId})`);
    }
    
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      const rowId = row[idColumnIndex];
      
      // Convert both to string and trim for comparison
      const rowIdStr = rowId ? rowId.toString().trim() : '';
      const searchIdStr = cleanStudentId.toString().trim();
      
      console.log(`Comparing: "${rowIdStr}" with "${searchIdStr}"`);
      
      if (rowIdStr === searchIdStr) {
        foundStudent = {
          studentId: rowIdStr,
          name: nameColumnIndex >= 0 ? row[nameColumnIndex] || '' : '',
          class: classColumnIndex >= 0 ? row[classColumnIndex] || '' : '',
          number: numberColumnIndex >= 0 ? row[numberColumnIndex] || '' : ''
        };
        console.log('Found student:', foundStudent);
        break;
      }
    }
    
    if (foundStudent) {
      // Parse full name into prefix, firstName, lastName - แก้ไขการแยกคำนำหน้าให้ถูกต้อง
      const fullName = foundStudent.name;
      let prefix = '';
      let firstName = '';
      let lastName = '';
      
      if (fullName) {
        console.log('=== Name Parsing Debug ===');
        console.log('Full name:', fullName);
        
        // Define all possible prefixes
        const prefixes = ['เด็กชาย', 'เด็กหญิง', 'นาย', 'นางสาว', 'นาง', 'ดร.', 'อาจารย์'];
        
        // Check if the name starts with any prefix
        let nameWithoutPrefix = fullName;
        for (const prefixOption of prefixes) {
          if (fullName.startsWith(prefixOption)) {
            prefix = prefixOption;
            nameWithoutPrefix = fullName.substring(prefixOption.length).trim();
            console.log('Found prefix:', prefix);
            console.log('Name without prefix:', nameWithoutPrefix);
            break;
          }
        }
        
        // Split the remaining name into firstName and lastName
        if (nameWithoutPrefix) {
          const nameParts = nameWithoutPrefix.split(' ');
          console.log('Name parts after prefix removal:', nameParts);
          
          if (nameParts.length >= 2) {
            // firstName lastName
            firstName = nameParts[0];
            lastName = nameParts.slice(1).join(' ');
            console.log('Pattern: firstName lastName');
          } else if (nameParts.length === 1) {
            // firstName only
            firstName = nameParts[0];
            lastName = '';
            console.log('Pattern: firstName only');
          }
        }
        
        console.log('Final parsed result:', { prefix, firstName, lastName });
      }
      
      const studentData = {
        studentId: foundStudent.studentId,
        grade: foundStudent.class,
        name: foundStudent.name,
        prefix: prefix,
        firstName: firstName,
        lastName: lastName,
        number: foundStudent.number
      };
      
      console.log('Processed student data:', studentData);
      return { success: true, student: studentData };
    } else {
      console.log('Student not found in database');
      return { success: false, message: 'Student not found' };
    }
    
  } catch (error) {
    console.error('Student lookup error:', error);
    return { success: false, message: 'Error looking up student: ' + error.message };
  }
}

/**
 * Handle booking submission
 */
function handleBookingSubmission(data) {
  try {
    console.log('=== Booking Submission ===');
    console.log('Booking data:', data);
    
    // Validate required fields
    const requiredFields = ['date', 'period', 'studentId', 'grade', 'prefix', 'firstName', 'lastName', 'symptoms', 'treatment'];
    for (const field of requiredFields) {
      if (!data[field]) {
        console.error('Missing required field:', field);
        return { success: false, message: `Missing required field: ${field}` };
      }
    }
    
    // Get spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // Check if Bookings sheet exists, if not create it
    let sheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    if (!sheet) {
      console.log('Bookings sheet not found, creating new sheet...');
      sheet = spreadsheet.insertSheet(BOOKING_SHEET_NAME);
      
      // Add headers in Thai
      const headers = [
        'วันที่เลือก',      // date
        'คาบเรียนที่',      // period
        'เลขประจำตัว',      // studentId
        'ระดับชั้น',        // grade
        'คำนำหน้า',         // prefix
        'ชื่อ',            // firstName
        'นามสกุล',         // lastName
        'อาการ',           // symptoms
        'วิธีรักษา',        // treatment
        'imageLink',       // imageLink
        'Timestamp'        // timestamp
      ];
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      console.log('Bookings sheet created with headers');
    }
    
    // Prepare row data
    const timestamp = new Date().toISOString();
    const rowData = [
      data.date,           // วันที่เลือก
      data.period,         // คาบเรียนที่
      data.studentId,      // เลขประจำตัว
      data.grade,          // ระดับชั้น
      data.prefix,         // คำนำหน้า
      data.firstName,      // ชื่อ
      data.lastName,       // นามสกุล
      data.symptoms,       // อาการ
      data.treatment,      // วิธีรักษา
      data.imageLink || 'No image', // imageLink
      timestamp           // Timestamp
    ];
    
    console.log('Row data to insert:', rowData);
    
    // Append data to sheet
    sheet.appendRow(rowData);
    
    console.log('Booking data inserted successfully');
    return { success: true, message: 'Booking submitted successfully' };
    
  } catch (error) {
    console.error('Booking submission error:', error);
    return { success: false, message: 'Error submitting booking: ' + error.message };
  }
}

/**
 * Handle dashboard data requests - COMPLETE VERSION
 */
function handleDashboardRequest() {
  try {
    console.log('=== Dashboard Request ===');
    
    // Get spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    
    if (!sheet) {
      console.log('Bookings sheet not found, returning empty dashboard');
      return { 
        success: true, 
        data: {
          totalBookings: 0,
          recentBookings: [],
          symptoms: {},
          monthlyData: {}
        }
      };
    }
    
    // Get all data
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    if (values.length <= 1) {
      console.log('No booking data found');
      return { 
        success: true, 
        data: {
          totalBookings: 0,
          recentBookings: [],
          symptoms: {},
          monthlyData: {}
        }
      };
    }
    
    // Process data
    const headers = values[0];
    const bookings = values.slice(1);
    
    console.log('Total bookings:', bookings.length);
    console.log('Headers:', headers);
    
    // Get recent bookings (last 10) with proper mapping
    const recentBookings = bookings.slice(-10).map(row => {
      const booking = {};
      headers.forEach((header, index) => {
        booking[header] = row[index];
      });
      
      // Map to frontend expected format
      return {
        firstName: booking['ชื่อ'] || booking['firstName'] || '',
        lastName: booking['นามสกุล'] || booking['lastName'] || '',
        timeSlot: booking['คาบเรียนที่'] || booking['period'] || booking['timeSlot'] || '',
        date: booking['วันที่เลือก'] || booking['date'] || '',
        symptoms: booking['อาการ'] || booking['symptoms'] || '',
        treatment: booking['วิธีรักษา'] || booking['treatment'] || '',
        timestamp: booking['Timestamp'] || ''
      };
    });
    
    // Count symptoms
    const symptoms = {};
    const symptomColumnIndex = headers.findIndex(h => h === 'อาการ' || h === 'symptoms');
    
    if (symptomColumnIndex !== -1) {
      bookings.forEach(row => {
        const symptom = row[symptomColumnIndex];
        if (symptom) {
          symptoms[symptom] = (symptoms[symptom] || 0) + 1;
        }
      });
    }
    
    // Monthly data
    const monthlyData = {};
    const dateColumnIndex = headers.findIndex(h => h === 'วันที่เลือก' || h === 'date');
    
    if (dateColumnIndex !== -1) {
      bookings.forEach(row => {
        const dateStr = row[dateColumnIndex];
        if (dateStr) {
          try {
            const date = new Date(dateStr);
            const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
            monthlyData[monthKey] = (monthlyData[monthKey] || 0) + 1;
          } catch (e) {
            console.warn('Invalid date:', dateStr);
          }
        }
      });
    }
    
    const dashboardData = {
      totalBookings: bookings.length,
      recentBookings: recentBookings,
      symptoms: symptoms,
      monthlyData: monthlyData
    };
    
    console.log('Dashboard data prepared');
    return { success: true, data: dashboardData };
    
  } catch (error) {
    console.error('Dashboard request error:', error);
    return { success: false, message: 'Error getting dashboard data: ' + error.message };
  }
}

/**
 * Handle bookings list requests - COMPLETE VERSION
 */
function handleBookingsRequest() {
  try {
    console.log('=== Bookings Request ===');
    
    // Get spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    
    if (!sheet) {
      console.log('Bookings sheet not found, returning empty list');
      return { success: true, bookings: [] };
    }
    
    // Get all data
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    if (values.length <= 1) {
      console.log('No booking data found');
      return { success: true, bookings: [] };
    }
    
    // Process data
    const headers = values[0];
    const bookings = values.slice(1).map(row => {
      const booking = {};
      headers.forEach((header, index) => {
        booking[header] = row[index];
      });
      
      // Map to frontend expected format
      return {
        firstName: booking['ชื่อ'] || booking['firstName'] || '',
        lastName: booking['นามสกุล'] || booking['lastName'] || '',
        timeSlot: booking['คาบเรียนที่'] || booking['period'] || booking['timeSlot'] || '',
        date: booking['วันที่เลือก'] || booking['date'] || '',
        symptoms: booking['อาการ'] || booking['symptoms'] || '',
        treatment: booking['วิธีรักษา'] || booking['treatment'] || '',
        timestamp: booking['Timestamp'] || '',
        studentId: booking['เลขประจำตัว'] || booking['studentId'] || '',
        grade: booking['ระดับชั้น'] || booking['grade'] || '',
        prefix: booking['คำนำหน้า'] || booking['prefix'] || '',
        imageLink: booking['imageLink'] || ''
      };
    });
    
    console.log('Bookings data prepared, count:', bookings.length);
    console.log('Sample booking:', bookings[0]);
    return { success: true, bookings: bookings };
    
  } catch (error) {
    console.error('Bookings request error:', error);
    return { success: false, message: 'Error getting bookings: ' + error.message };
  }
}

/**
 * Health check function
 */
function healthCheck() {
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const bookingSheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    const dataSheet = spreadsheet.getSheetByName(DATA_SHEET_NAME);
    
    const allSheets = spreadsheet.getSheets();
    const sheetNames = allSheets.map(s => s.getName());
    
    return {
      success: true,
      message: 'Apps Script is healthy',
      sheets: {
        booking: !!bookingSheet,
        data: !!dataSheet
      },
      availableSheets: sheetNames,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    return {
      success: false,
      message: 'Health check failed: ' + error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * Setup function to initialize the system
 */
function setup() {
  try {
    console.log('=== Setting up iMedReserve System (Complete Version) ===');
    
    // Create Bookings sheet if it doesn't exist
    const createResult = createBookingsSheet();
    console.log('Create Bookings sheet result:', createResult);
    
    // Test health check
    const healthResult = healthCheck();
    console.log('Health check result:', healthResult);
    
    console.log('Setup completed successfully');
    return { success: true, message: 'Setup completed successfully' };
    
  } catch (error) {
    console.error('Setup error:', error);
    return { success: false, message: 'Setup failed: ' + error.message };
  }
}

/**
 * Create Bookings sheet if it doesn't exist
 */
function createBookingsSheet() {
  try {
    console.log('=== Creating Bookings Sheet ===');
    
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // Check if sheet already exists
    let sheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    if (sheet) {
      console.log('Bookings sheet already exists');
      return { success: true, message: 'Bookings sheet already exists' };
    }
    
    // Create new sheet
    sheet = spreadsheet.insertSheet(BOOKING_SHEET_NAME);
    
    // Add headers in Thai
    const headers = [
      'วันที่เลือก',      // date
      'คาบเรียนที่',      // period
      'เลขประจำตัว',      // studentId
      'ระดับชั้น',        // grade
      'คำนำหน้า',         // prefix
      'ชื่อ',            // firstName
      'นามสกุล',         // lastName
      'อาการ',           // symptoms
      'วิธีรักษา',        // treatment
      'imageLink',       // imageLink
      'Timestamp'        // timestamp
    ];
    
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    console.log('Bookings sheet created successfully');
    return { success: true, message: 'Bookings sheet created successfully' };
    
  } catch (error) {
    console.error('Error creating Bookings sheet:', error);
    return { success: false, message: 'Error creating Bookings sheet: ' + error.message };
  }
}

/**
 * Test function to verify data mapping
 */
function testDataMapping() {
  try {
    console.log('=== Testing Data Mapping ===');
    
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    
    if (!sheet) {
      console.log('Bookings sheet not found');
      return { success: false, message: 'Bookings sheet not found' };
    }
    
    const dataRange = sheet.getDataRange();
    const values = dataRange.getValues();
    
    if (values.length <= 1) {
      console.log('No data found');
      return { success: true, message: 'No data to test' };
    }
    
    const headers = values[0];
    const sampleRow = values[1];
    
    console.log('Headers:', headers);
    console.log('Sample row:', sampleRow);
    
    // Test mapping
    const booking = {};
    headers.forEach((header, index) => {
      booking[header] = sampleRow[index];
    });
    
    const mappedBooking = {
      firstName: booking['ชื่อ'] || booking['firstName'] || '',
      lastName: booking['นามสกุล'] || booking['lastName'] || '',
      timeSlot: booking['คาบเรียนที่'] || booking['period'] || booking['timeSlot'] || '',
      date: booking['วันที่เลือก'] || booking['date'] || '',
      symptoms: booking['อาการ'] || booking['symptoms'] || '',
      treatment: booking['วิธีรักษา'] || booking['treatment'] || '',
      timestamp: booking['Timestamp'] || ''
    };
    
    console.log('Original booking:', booking);
    console.log('Mapped booking:', mappedBooking);
    
    return {
      success: true,
      headers: headers,
      sampleRow: sampleRow,
      originalBooking: booking,
      mappedBooking: mappedBooking
    };
    
  } catch (error) {
    console.error('Test error:', error);
    return { success: false, message: 'Test failed: ' + error.message };
  }
}

/**
 * Add sample data for testing
 */
function addSampleData() {
  try {
    console.log('=== Adding Sample Data ===');
    
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    let sheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    
    if (!sheet) {
      console.log('Creating Bookings sheet first...');
      createBookingsSheet();
      sheet = spreadsheet.getSheetByName(BOOKING_SHEET_NAME);
    }
    
    // Sample booking data
    const sampleData = [
      ['15/12/2024', 'คาบ 1', '1234567890', 'ม.1', 'เด็กชาย', 'สมชาย', 'ใจดี', 'ปวดหัว', 'ทานยา', 'No image', new Date().toISOString()],
      ['15/12/2024', 'คาบ 2', '0987654321', 'ม.2', 'เด็กหญิง', 'สมหญิง', 'รักดี', 'ไข้', 'ทานยา', 'No image', new Date().toISOString()],
      ['16/12/2024', 'คาบ 3', '1122334455', 'ม.3', 'เด็กชาย', 'สมชาย', 'ใจดี', 'ท้องเสีย', 'ทานยา', 'No image', new Date().toISOString()],
      ['16/12/2024', 'คาบ 4', '5566778899', 'ม.1', 'เด็กหญิง', 'สมหญิง', 'รักดี', 'เจ็บคอ', 'ทานยา', 'No image', new Date().toISOString()],
      ['17/12/2024', 'คาบ 5', '9988776655', 'ม.2', 'เด็กชาย', 'สมชาย', 'ใจดี', 'บาดเจ็บ', 'ปฐมพยาบาล', 'No image', new Date().toISOString()]
    ];
    
    // Add sample data
    sampleData.forEach(row => {
      sheet.appendRow(row);
    });
    
    console.log('Sample data added successfully');
    return { success: true, message: 'Sample data added successfully' };
    
  } catch (error) {
    console.error('Error adding sample data:', error);
    return { success: false, message: 'Error adding sample data: ' + error.message };
  }
}

/**
 * Test function for student lookup
 */
function testStudentLookup() {
  const result = handleStudentLookup('46687');
  console.log('Test result:', result);
  return result;
}

/**
 * Test function for dashboard
 */
function testDashboard() {
  const result = handleDashboardRequest();
  console.log('Dashboard test result:', result);
  return result;
}

/**
 * Test function for bookings
 */
function testBookings() {
  const result = handleBookingsRequest();
  console.log('Bookings test result:', result);
  return result;
}

/**
 * Debug function to check Data sheet structure
 */
function debugDataSheet() {
  try {
    console.log('=== Debug Data Sheet ===');
    
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const dataSheet = spreadsheet.getSheetByName(DATA_SHEET_NAME);
    
    if (!dataSheet) {
      console.log('Data sheet not found');
      return { success: false, message: 'Data sheet not found' };
    }
    
    const dataRange = dataSheet.getDataRange();
    const values = dataRange.getValues();
    
    console.log('Total rows:', values.length);
    console.log('Headers:', values[0]);
    
    if (values.length <= 1) {
      return { success: true, message: 'No data found', rows: 0 };
    }
    
    // Show first 5 rows of data
    const sampleData = values.slice(1, 6).map((row, index) => {
      const rowData = {};
      values[0].forEach((header, colIndex) => {
        rowData[header] = row[colIndex];
      });
      return { rowNumber: index + 2, data: rowData };
    });
    
    return {
      success: true,
      totalRows: values.length - 1,
      headers: values[0],
      sampleData: sampleData
    };
    
  } catch (error) {
    console.error('Debug error:', error);
    return { success: false, message: 'Debug failed: ' + error.message };
  }
}

/**
 * Test function to search for specific student ID
 */
function testSearchStudent(studentId) {
  try {
    console.log('=== Test Search Student ===');
    console.log('Searching for ID:', studentId);
    
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const dataSheet = spreadsheet.getSheetByName(DATA_SHEET_NAME);
    
    if (!dataSheet) {
      return { success: false, message: 'Data sheet not found' };
    }
    
    const dataRange = dataSheet.getDataRange();
    const values = dataRange.getValues();
    
    if (values.length <= 1) {
      return { success: false, message: 'No data found' };
    }
    
    const headers = values[0];
    console.log('Headers:', headers);
    
    // Find ID column
    const idColumnIndex = headers.findIndex(header => {
      const headerStr = header.toString().toLowerCase();
      return headerStr === 'id' || 
             headerStr.includes('เลขประจำตัว') ||
             headerStr.includes('รหัสนักเรียน') ||
             headerStr.includes('student id');
    });
    
    if (idColumnIndex === -1) {
      return { success: false, message: 'ID column not found' };
    }
    
    console.log('ID column index:', idColumnIndex);
    console.log('ID column name:', headers[idColumnIndex]);
    
    // Search for student
    for (let i = 1; i < values.length; i++) {
      const row = values[i];
      const rowId = row[idColumnIndex];
      const rowIdStr = rowId ? rowId.toString().trim() : '';
      const searchIdStr = studentId.toString().trim();
      
      console.log(`Row ${i}: "${rowIdStr}" vs "${searchIdStr}"`);
      
      if (rowIdStr === searchIdStr) {
        const studentData = {};
        headers.forEach((header, index) => {
          studentData[header] = row[index];
        });
        
        return {
          success: true,
          found: true,
          rowNumber: i + 1,
          studentData: studentData
        };
      }
    }
    
    return {
      success: true,
      found: false,
      message: 'Student not found'
    };
    
  } catch (error) {
    console.error('Test search error:', error);
    return { success: false, message: 'Test search failed: ' + error.message };
  }
}

/**
 * Test function for name parsing
 */
function testNameParsing() {
  const testNames = [
    'นายทดสอบ ทดสอบ',
    'เด็กชายเกียรติศักดิ์ ภัชสิงห์สูง',
    'เด็กชายสมชาย ใจดี',
    'นางสาวสมหญิง รักดี',
    'สมชาย ใจดี',
    'สมหญิง',
    'ดร.สมชาย ใจดี มาก'
  ];
  
  console.log('=== Testing Name Parsing ===');
  
  testNames.forEach(fullName => {
    console.log('\n--- Testing:', fullName, '---');
    
    let prefix = '';
    let firstName = '';
    let lastName = '';
    
    // Define all possible prefixes
    const prefixes = ['เด็กชาย', 'เด็กหญิง', 'นาย', 'นางสาว', 'นาง', 'ดร.', 'อาจารย์'];
    
    // Check if the name starts with any prefix
    let nameWithoutPrefix = fullName;
    for (const prefixOption of prefixes) {
      if (fullName.startsWith(prefixOption)) {
        prefix = prefixOption;
        nameWithoutPrefix = fullName.substring(prefixOption.length).trim();
        console.log('Found prefix:', prefix);
        console.log('Name without prefix:', nameWithoutPrefix);
        break;
      }
    }
    
    // Split the remaining name into firstName and lastName
    if (nameWithoutPrefix) {
      const nameParts = nameWithoutPrefix.split(' ');
      console.log('Name parts after prefix removal:', nameParts);
      
      if (nameParts.length >= 2) {
        // firstName lastName
        firstName = nameParts[0];
        lastName = nameParts.slice(1).join(' ');
        console.log('Pattern: firstName lastName');
      } else if (nameParts.length === 1) {
        // firstName only
        firstName = nameParts[0];
        lastName = '';
        console.log('Pattern: firstName only');
      }
    }
    
    console.log('Result:', { prefix, firstName, lastName });
  });
} 
